@{
    ViewBag.Title = "BugRobot v0.1";
}

<h2>BugRobot</h2>

<fieldset id="robot-config" class="robot-config">
    <legend>Configuration</legend>

    <div class="form-group">
        <label for="QueryUrl">Query url</label>
        <input type="text" id="QueryUrl" name="QueryUrl" class="form-control large" value="@ViewBag.URL" />
        <span class="help-block">Url of the query that will be listened for new bugs.</span>
    </div>
    <div class="form-group">
        <label for="UserName">User name</label>
        <input type="text" id="UserName" name="UserName" class="form-control medium" />
        <span class="help-block">Name of the user to assign a new bug automaticaly (optional).</span>
    </div>
    <div class="form-group">
        <label for="Interval">Interval</label>
        <input type="text" id="Interval" name="Interval" class="form-control small" value="@ViewBag.Interval" />
        <span class="help-block">Interval in minutes to check for new bugs.</span>
    </div>
    <div class="form-group">
        <input type="checkbox" id="AutoAssign" name="AutoAssign" />
        <label for="AutoAssign" class="large">AutoAssign</label>
        <span class="help-block">Check it if you want the system to automaticaly assign a new bug to the user specified.</span>
    </div>

    
    <div class="form-group">
        <input type="checkbox" id="NotifyOnlyNewBug" name="NotifyOnlyNewBug" />
        <label for="NotifyOnlyNewBug" class="large">Notify me just unassigned bugs</label>
        <span class="help-block">Check it if you want the system to only show notifications when new bug unassigned arise.</span>
    </div>

    <input id="btn-init-robot" type="submit" value="Start Robot" class="btn btn-default" />
</fieldset>

<fieldset id="robot-stats" class="robot-stats">
    <legend>Running BugRobot...</legend>
    <div id="robot-stats-log" class="robot-stats-log"></div>
</fieldset>


@section Scripts {

    <script type="text/javascript">

        var initialized = false;
        var lastClickId = 0;

        $(document).ready(function () {

            // asks permission for notifications
            Notification.requestPermission();

            // cache jquery selectors
            var $btnStart = $("#btn-init-robot");
            var $stats = $("#robot-stats");
            var $log = $("#robot-stats-log");
            var $inputs = $(".form-group input");

            var $queryUrl = $("#QueryUrl");
            var $userName = $("#UserName");
            var $interval = $("#Interval");
            var $autoAssign = $("#AutoAssign")[0];
            var $notifyOnlyNewBugs = $("#NotifyOnlyNewBug")[0];

            // Start button event changes dependending on its state
            $btnStart.on("click", function () {

                $btn = $(this)

                if ($btn.val() == "Start Robot") {
                    startRobot();
                }
                else if ($btn.val() == "Stop Robot") {
                    stopRobot();
                }
            });

            // Starts running the robot
            function startRobot() {
                initialized = true;

                // Gets an Id for each call to this function
                lastClickId = lastClickId + 1;
                var clickId = lastClickId;

                logEvent("Started bugRobot");

                $stats.show();
                $btnStart.val("Stop Robot");
                $btnStart.removeClass("btn-default").addClass("btn-danger");
                $inputs.attr("disabled", "disabled")
                $stats.find("legend").text("Running BugRobot...");

                // convert interval from minutes no miliseconds
                var interval = parseInt($interval.val()) * 1000 * 60

                // start checking for bugs
                checkForBugs(interval, clickId);
            }

            // Stops running the robot
            function stopRobot() {
                initialized = false;

                logEvent("Stopped BugRobot");

                $btnStart.val("Start Robot");
                $btnStart.removeClass("btn-danger").addClass("btn-default");
                $inputs.removeAttr("disabled");
                $stats.find("legend").text("BugRobot is idle");
            }

            // Method that runs in a loop checking for bugs
            function checkForBugs(interval, clickId) {

                // Control execution
                if (initialized && lastClickId == clickId) {

                    getBugsFromTFS()

                    window.setTimeout(function () { checkForBugs(interval, clickId) }, interval)
                }
            }

            // Get data from TFS through ajax
            function getBugsFromTFS() {
                console.log($autoAssign.checked)
                console.log($notifyOnlyNewBugs.checked)
                $.ajax({
                    url: "/Bot/GetBugsFromTFS",
                    method: "GET",
                    data: { queryUrl: $queryUrl.val(), userName: $userName.val(), autoAssign: $autoAssign.checked, notifyOnlyNewBugs: $notifyOnlyNewBugs.checked },
                    dataType: 'json',
                    contentType: "application/json",
                    success: function (data) {
                        logEvent(data);

                        // If success send notification to the browser
                        if (data.Success) {
                            var notification = new Notification("LegalOne Application Maintenance", { body: data.Title, tag: "bugRobot", icon: data.Icon });

                            if (data.Url) {
                                notification.onclick = function () {
                                    window.location.href = data.Url;
                                }
                            }

                            // After finding a available bug, stops the robot
                            //stopRobot();
                        }
                    },
                    error: function (data) {
                        logEvent(data.statusText);
                        stopRobot()
                    }
                });
            }

            // Gets formatted current time string 
            function getDateTimeNowString() {
                var date = new Date()

                var hours = date.getHours();
                var minutes = date.getMinutes();
                var seconds = date.getSeconds();

                return (hours < 10 ? "0" + hours : hours).toString() + ":" +
                       (minutes < 10 ? "0" + minutes : minutes).toString() + ":" +
                       (seconds < 10 ? "0" + seconds : seconds).toString();
            }

            // log an event on the logger control
            function logEvent(message) {

                var result = "<p>[" + getDateTimeNowString() + "] ";

                // format diferently if the message is an object from getBugsFromTFS function ajax result
                if (message.Title) {
                    result += (message.Url) ? "<a href='" + message.Url + "'>" + message.Title + "</a></p>"
                                            : message.Title + "</p>"
                }
                else {
                    result += message + "</p>";
                }

                $log.append(result);

                // scroll logger control to the end, to show always the latest entries
                var scrollValue = $log.children("p").length * $log.children("p").first().height() * 2;
                $log.scrollTop(scrollValue);
            }
        });

    </script>
}


